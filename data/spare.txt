<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Bản đồ Dijkstra</title>
        <style>
            body {
            font-family: 'Segoe UI', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            background: #f0f0f0;
            margin: 0;
            padding: 20px;
            }

            h2 {
            color: #333;
            margin-bottom: 10px;
            }

            .controls {
            display: flex;
            gap: 20px;
            margin-bottom: 15px;
            flex-wrap: wrap;
            justify-content: center;
            }

            select, button {
            font-size: 1rem;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            }

            button {
            background-color: #007BFF;
            color: white;
            border: none;
            cursor: pointer;
            }

            button:hover {
            background-color: #0056b3;
            }

            #map {
            width: 90vw;
            max-width: 800px;
            height: 500px;
            margin-bottom: 15px;
            }

            #result {
            white-space: pre-wrap;
            color: #444;
            text-align: center;
            }

            .marker-label {
            background-color: transparent;
            color: red;
            font-weight: bold;
            text-align: center;
            margin-top: 4px;
            font-size: 0.8rem;
            max-width: 100px;
            word-wrap: break-word;
            }
        </style>
    </head>
    <body>
        <h2>Tìm đường đi ngắn nhất</h2>
        <div class="controls">
            <label>Điểm bắt đầu:
            <select id="start"></select>
            </label>
            <label>Điểm kết thúc:
            <select id="end"></select>
            </label>
            <button onclick="findPath()">Tìm đường</button>
        </div>

        <div id="map"></div>
        <div id="result"></div>

        <script>
            const nodes = {
                "A": { lat: 21.000, lng: 105.850 },
                "B": { lat: 21.010, lng: 105.855 }
            };

            let map, markers = {}, directionsRenderer, directionsService;
            let selectedStart = null;
            let selectedEnd = null;

            function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 21.005, lng: 105.845 },
                zoom: 15,
                restriction: {
                latLngBounds: {
                    north: 21.015,
                    south: 20.995,
                    east: 105.86,
                    west: 105.83
                },
                strictBounds: true
                }
            });

            directionsRenderer = new google.maps.DirectionsRenderer({ map });
            directionsService = new google.maps.DirectionsService();

            for (let id in nodes) {
                const pos = nodes[id];
                const marker = new google.maps.Marker({
                position: pos,
                map,
                icon: getMarkerIcon("default")
                });

                const label = new google.maps.InfoWindow({
                content: `<div class="marker-label">${id}</div>`,
                disableAutoPan: true
                });
                label.open(map, marker);

                marker.addListener("click", () => {
                if (!selectedStart) {
                    selectedStart = id;
                    document.getElementById("start").value = id;
                } else {
                    selectedEnd = id;
                    document.getElementById("end").value = id;
                }
                });

                markers[id] = marker;
                addOption("start", id);
                addOption("end", id);
            }
            }

            function addOption(selectId, value) {
            const option = document.createElement("option");
            option.value = value;
            option.textContent = value;
            document.getElementById(selectId).appendChild(option);
            }

            function getMarkerIcon(type) {
            const colors = {
                start: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png",
                end: "http://maps.google.com/mapfiles/ms/icons/green-dot.png",
                default: "http://maps.google.com/mapfiles/ms/icons/red-dot.png"
            };
            return { url: colors[type] || colors.default };
            }

            function resetMarkerColors() {
            for (let id in markers) {
                markers[id].setIcon(getMarkerIcon("default"));
            }
            }

            function findPath() {
            const start = document.getElementById("start").value;
            const end = document.getElementById("end").value;

            fetch(`/dijkstra?from=${start}&to=${end}`)
                .then(res => res.json())
                .then(data => {
                if (!data.path || data.path.length === 0) {
                    document.getElementById("result").textContent = "Không tìm thấy đường đi.";
                    return;
                }

                document.getElementById("result").textContent =
                    "Đường đi: " + data.path.join(" → ") + "\nTổng khoảng cách: " + data.cost + " đơn vị";

                resetMarkerColors();
                if (data.path.length > 0) {
                    markers[data.path[0]].setIcon(getMarkerIcon("start"));
                    markers[data.path[data.path.length - 1]].setIcon(getMarkerIcon("end"));
                    for (let i = 1; i < data.path.length - 1; i++) {
                    markers[data.path[i]].setIcon(getMarkerIcon("default"));
                    }
                }

                const waypoints = data.path.slice(1, -1).map(id => ({
                    location: nodes[id],
                    stopover: true
                }));

                directionsService.route({
                    origin: nodes[start],
                    destination: nodes[end],
                    waypoints: waypoints,
                    travelMode: google.maps.TravelMode.DRIVING
                }, (result, status) => {
                    if (status === "OK") {
                    directionsRenderer.setDirections(result);
                    } else {
                    console.error("Directions request failed: " + status);
                    }
                });
                });
            }
        </script>

        <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCZpmIx-04zsY7o6RJXQ2TnUrmtgkmx9qI&callback=initMap">
        </script>
    </body>
</html>
